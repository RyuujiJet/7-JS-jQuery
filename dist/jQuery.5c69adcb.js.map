{"version":3,"sources":["jQuery.js"],"names":["window","$","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","addClass","className","i","length","classList","add","oldApi","find","arr","concat","from","end","each","fn","call","parent","array","node","indexOf","parentNode","push","children","print","console","log"],"mappings":";;;;;;;;;;;;AAAAA,MAAM,CAACC,CAAP,GAAWD,MAAM,CAACE,MAAP,GAAgB,UAAUC,eAAV,EAA2B;AAAE;AACpD,MAAIC,QAAJ;;AACA,MAAI,OAAOD,eAAP,KAA2B,QAA/B,EAAyC;AACrCC,IAAAA,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0BH,eAA1B,CAAX;AACH,GAFD,MAEO,IAAIA,eAAe,YAAYI,KAA/B,EAAsC;AACzCH,IAAAA,QAAQ,GAAGD,eAAX;AACH,GANiD,CAOlD;;;AACA,SAAO;AACH;AACA;AACAK,IAAAA,QAHG,oBAGMC,SAHN,EAGiB;AAChB,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,QAAQ,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCN,QAAAA,QAAQ,CAACM,CAAD,CAAR,CAAYE,SAAZ,CAAsBC,GAAtB,CAA0BJ,SAA1B;AACH,OAHe,CAIhB;;;AACA,aAAO,IAAP,CALgB,CAKJ;AACf,KATE;AAUHK,IAAAA,MAAM,EAAEX,eAAe,CAACW,MAVrB;AAWH;AACAC,IAAAA,IAZG,gBAYEN,SAZF,EAYa;AACZ,UAAIO,GAAG,GAAG,EAAV;;AACA,WAAI,IAAIN,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,QAAQ,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCM,QAAAA,GAAG,GAAGA,GAAG,CAACC,MAAJ,CAAWV,KAAK,CAACW,IAAN,CAAWd,QAAQ,CAACM,CAAD,CAAR,CAAYJ,gBAAZ,CAA6BG,SAA7B,CAAX,CAAX,CAAN;AACH,OAJW,CAKZ;;;AACAO,MAAAA,GAAG,CAACF,MAAJ,GAAa,IAAb,CANY,CAMM;AAClB;AACA;;AACA,aAAOZ,MAAM,CAACc,GAAD,CAAb;AACH,KAtBE;AAuBH;AACAG,IAAAA,GAxBG,iBAwBG;AACF,aAAO,KAAKL,MAAZ,CADE,CACiB;AACtB,KA1BE;AA2BH;AACAM,IAAAA,IA5BG,gBA4BEC,EA5BF,EA4BM;AACL,WAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,QAAQ,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCW,QAAAA,EAAE,CAACC,IAAH,CAAQ,IAAR,EAAclB,QAAQ,CAACM,CAAD,CAAtB,EAA2BA,CAA3B;AACH;;AACD,aAAO,IAAP;AACH,KAjCE;AAkCH;AACAa,IAAAA,MAnCG,oBAmCM;AACL,UAAMC,KAAK,GAAG,EAAd;AACA,WAAKJ,IAAL,CAAU,UAAAK,IAAI,EAAI;AACd,YAAID,KAAK,CAACE,OAAN,CAAcD,IAAI,CAACE,UAAnB,MAAmC,CAAC,CAAxC,EAA2C;AACvCH,UAAAA,KAAK,CAACI,IAAN,CAAWH,IAAI,CAACE,UAAhB;AACH;AACJ,OAJD;AAKA,aAAOzB,MAAM,CAACsB,KAAD,CAAb;AACH,KA3CE;AA4CH;AACAK,IAAAA,QA7CG,sBA6CQ;AACP,UAAIL,KAAK,GAAG,EAAZ;AACA,WAAKJ,IAAL,CAAU,UAAAK,IAAI,EAAI;AACd;AACAD,QAAAA,KAAK,CAACI,IAAN,OAAAJ,KAAK,qBAASC,IAAI,CAACI,QAAd,EAAL;AACH,OAHD;AAIA,aAAO3B,MAAM,CAACsB,KAAD,CAAb;AACH,KApDE;AAqDHM,IAAAA,KArDG,mBAqDK;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY5B,QAAZ;AACH;AAvDE,GAAP,CARkD,CAiElD;AACA;AACH,CAnED","file":"jQuery.5c69adcb.js","sourceRoot":"..\\src","sourcesContent":["window.$ = window.jQuery = function (selectorOrArray) { // window.$ = window.jQuery, $可以代替jQuery使其更简洁\r\n    let elements\r\n    if (typeof selectorOrArray === 'string') {\r\n        elements = document.querySelectorAll(selectorOrArray)\r\n    } else if (selectorOrArray instanceof Array) {\r\n        elements = selectorOrArray\r\n    }\r\n    // const api = {\r\n    return {\r\n        // 闭包：函数访问外部的变量\r\n        // 查 → 查找元素\r\n        addClass(className) {\r\n            for(let i = 0; i < elements.length; i++) {\r\n                elements[i].classList.add(className)\r\n            }\r\n            // return api\r\n            return this // api.addClass(XXX) 等价于api.addClass.call(api, XXX), this就是api\r\n        },\r\n        oldApi: selectorOrArray.oldApi,\r\n        // 查 → 在指定元素里查找元素\r\n        find(className) {\r\n            let arr = []\r\n            for(let i = 0; i < elements.length; i++) {\r\n                arr = arr.concat(Array.from(elements[i].querySelectorAll(className)))\r\n            }\r\n            // end函数\r\n            arr.oldApi = this // this是api1\r\n            // const newApi = jQuery(arr)\r\n            // return newApi\r\n            return jQuery(arr)\r\n        },\r\n        // 返回前一个元素\r\n        end() {\r\n            return this.oldApi // this是api2\r\n        },\r\n        // 遍历\r\n        each(fn) {\r\n            for(let i = 0; i < elements.length; i++) {\r\n                fn.call(null, elements[i], i)\r\n            }\r\n            return this\r\n        },\r\n        // 获取父元素\r\n        parent() {\r\n            const array = []\r\n            this.each(node => {\r\n                if (array.indexOf(node.parentNode) === -1) {\r\n                    array.push(node.parentNode)\r\n                }\r\n            })\r\n            return jQuery(array)\r\n        },\r\n        // 获取子元素\r\n        children() {\r\n            let array = []\r\n            this.each(node => {\r\n                // array = array.concat(Array.from(node.children))\r\n                array.push(...node.children)\r\n            })\r\n            return jQuery(array)\r\n        },\r\n        print() {\r\n            console.log(elements)\r\n        }\r\n    }\r\n    // 将api换成this的原因：可以直接return这个函数\r\n    // return api\r\n}"]}